@using ChartJs.Blazor;


@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Interop

@using ChartJs.Blazor.LineChart
@using System.Net.Http.Headers
@using SportApp.Shared.Services;
@using System.IO;
@using SportApp.Shared.ViewModel;

@inject IActivityServices LocalActivityServices


<Chart Config="_config" Height="80" @ref="_chart"></Chart>

@code {

    [Parameter]
    public int trainingId { get; set; }
    [Parameter]
    public EventCallback<int> trainingIdChanged { get; set; }


    private LineConfig _config;
    private Chart _chart;

    protected override void OnInitialized()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = false,
                    Text = "Calories"
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Bounds = ScaleBound.Data,
                        }
                    },
                    YAxes = new List<CartesianAxis> {
                                                new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                Display = true,
                                LabelString = "kcal/min"
                            }
                        }
                    }
                }
            }
        };
        List<TimePoint> s = new List<TimePoint>();
        IDataset<TimePoint> dataset1 = new LineDataset<TimePoint>(s)
        {
            Label = "Calories burnt",
            BackgroundColor = ColorUtil.ColorHexString(252, 3, 3),
            BorderColor = ColorUtil.ColorHexString(252, 3, 3),
            Fill = FillingMode.Disabled,
            PointStyle = PointStyle.Circle,
            PointBorderWidth = 0,
            //PointBorderWidth = 0,
            SteppedLine = SteppedLine.False,
            LineTension = 0.4,
            BorderWidth = 1,

        };

        _config.Data.Datasets.Add(dataset1);
    }


    IDataset<TimePoint> dataset1;

    public async void Update(int trainingId, DateTime startingTime)
    {
        dataset1 = (IDataset<TimePoint>)_config.Data.Datasets[0];
        dataset1.Clear();

        List<CaloriesGraph> calories = await LocalActivityServices.GetCalories(trainingId);

        if (calories.Count == 1)
        {
            dataset1.Add((new TimePoint(startingTime, calories[0].Calories)));
            dataset1.Add((new TimePoint(startingTime.AddSeconds(calories[0].Time), calories[0].Calories)));

        }
        else
        {
            calories.Sort((t1, t2) => t1.Time.CompareTo(t2.Time));

            double prevTime=0;
            foreach (var y in calories)
            {
                //dataset1.Add((new TimePoint(startingTime.AddSeconds(prevTime), y.Calories)));
                dataset1.Add((new TimePoint(startingTime.AddSeconds(y.Time), y.Calories)));
                //prevTime = y.Time;
            }
        }


        _config.Data.Datasets[0] = dataset1;

        _chart.Update();
    }
}

