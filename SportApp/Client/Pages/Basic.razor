@page "/basic"
@using ChartJs.Blazor;


@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Interop

@using ChartJs.Blazor.LineChart

<Chart Config="_config" @ref="_chart"></Chart>


@code {
    private LineConfig _config;
    private Chart _chart;

    protected override void OnInitialized()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "ChartJs.Blazor Line Chart"
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Month"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                }
            }
        };

        List<Point> s = new List<Point>();

        s.AddRange(Enumerable.Range(1, 100).Select(i => new Point(i, i + 10)));
        s.Add(new Point(101, 11));
        s.Add(new Point(102, 3));
        s.AddRange(Enumerable.Range(1, 100).Select(i => new Point(i + 102, i + 10)));

        // lineConfig.Data.Datasets.Add(s);

        IDataset<Point> dataset1 = new LineDataset<Point>(s)
        {
            Label = "My first dataset",
            //BackgroundColor = ColorUtil.ColorHexString(252, 3, 3),
            BorderColor = ColorUtil.ColorHexString(252, 186, 3),
            Fill = FillingMode.Disabled,
            PointBorderWidth = 0,
            SteppedLine = SteppedLine.False,

        };

        _config.Data.Datasets.Add(dataset1);
    }

}

