@page "/diary"

@using System.Net.Http.Headers
@using SportApp.Shared.Services;
@using System.IO;
@using System.Xml.Serialization;
@using SportApp.Shared;

@inject SportApp.Client.LoginLogic.LoginState LoginState
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILoginServices LocalLoginServices
@inject IActivityServices LocalActivityServices
@inject HttpClient http

<InputFile OnChange="HandleFileSelected" />


@code {
    string token;
    int id;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        id = await localStorage.GetItemAsync<int>("Id");
        token = await localStorage.GetItemAsync<string>("Token");
        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        // needs to be automized
        if (id == 0)
        {
            NavigationManager.NavigateTo("/");
            LoginState.LoggedIn = false;
        }
    }
}

@code {
    int numLines;
    string data;
    string line;
    IFileListEntry file;

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();

        Activity activity;

        using (var stream2 = new MemoryStream())
        {
            await file.Data.CopyToAsync(stream2);   // although file.Data is itself a stream, using it directly causes "synchronous reads are not supported" errors below.
            stream2.Seek(0, SeekOrigin.Begin);      // at the end of the copy method, we are at the end of both the input and output stream and need to reset the one we want to work with.
            var reader = new System.IO.StreamReader(stream2);

            activity = GarminUtils.ConvertTCS(stream2);

            LocalActivityServices.ProcessActivity(activity);
            //LocalActivityServices.PostActivity(activity);
        }
    }
}
