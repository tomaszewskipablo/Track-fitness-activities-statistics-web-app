@page "/diary"

@using System.Net.Http.Headers
@using SportApp.Shared.Services;
@using System.IO;
@using System;
@using SportApp.Shared.ViewModel;

@using System.Xml.Serialization;
@using SportApp.Shared;

@inject SportApp.Client.LoginLogic.LoginState LoginState
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILoginServices LocalLoginServices
@inject IActivityServices LocalActivityServices
@inject ISportServices LocalSportServices
@inject HttpClient http

<Basic @ref="basic" @bind-trainingId="@trainingId"></Basic>

<MatTable Style="font-size:13px; padding:0px" Items="@sortedData" class="mat-elevation-z5" ShowPaging="true" UseSortHeaderRow="true" SelectionChanged="SelectionChangedEvent" AllowSelection="true">
    <MatTableHeader>
        <MatSortHeaderRow Style="font-size:13px; padding:0px" SortChanged="@SortData">
            <MatSortHeader SortId="sport">Sport</MatSortHeader>
            <MatSortHeader SortId="date"><span style="width:180px">Starting time</span> </MatSortHeader>
            <MatSortHeader SortId="distanceMeters"><span style="width:180px">Distance</span></MatSortHeader>
            <MatSortHeader SortId="velocity">Velocity</MatSortHeader>
            <MatSortHeader SortId="duration">Duration</MatSortHeader>
            <MatSortHeader SortId="calories">Calories</MatSortHeader>
        </MatSortHeaderRow>
    </MatTableHeader>
    <MatTableRow>
        <center>
            <div style="padding-right:12px;">
                @if (context.SportId == 1)
                {<td style="border:none"><MatIcon Icon="directions_bike"></MatIcon></td>}
                else if (context.SportId == 2)
                {<td style="border:none"><MatIcon Icon="directions_run"></MatIcon></td>}
                else if (context.SportId == 3)
                {<td><MatIcon Icon="directions_walk"></MatIcon></td>}
                else if (context.SportId == 7)
                {<td><MatIcon Icon="rowing"></MatIcon></td>}
                else if (context.SportId == 17)
                {<td><MatIcon Icon="fitness_center"></MatIcon></td>}
                else if (context.SportId == 8)
                {<td><MatIcon Icon="pool"></MatIcon></td>}
                else
                {<td>@context.SportName</td>}
            </div>
        </center>


        <td>@context.StartingTime</td>
        <td>@Math.Round(context.DistanceMeters / 1000, 2, MidpointRounding.AwayFromZero) km</td>
        <td>@Math.Round(context.AverageVelocitykmh, 2, MidpointRounding.AwayFromZero) km/h</td>
        <td>@TimeSpan.FromSeconds((int)(context.DurationSeconds)) </td>
        <td>@Math.Round(context.Calories) kcal</td>
    </MatTableRow>
</MatTable>

<p style="margin-top:10x">
    <MatIconButton Icon="delete" @onclick="DeleteRow"> </MatIconButton><div class="alert @_statusClass">@_errorMessage</div>
</p>

@code {
    string token;
    int UserId;

    Basic basic;

    TrainingSessionDTO[] TrainingList;
    private string _statusClass;
    private string _errorMessage;
    int trainingId;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        UserId = await localStorage.GetItemAsync<int>("Id");
        token = await localStorage.GetItemAsync<string>("Token");
        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        if (UserId == 0)
        {
            NavigationManager.NavigateTo("/");
            LoginState.LoggedIn = false;
        }

        TrainingList = await LocalActivityServices.GetTrainingSession(UserId);

        if (TrainingList.Length > 0)
            basic.Update(TrainingList[0].Id, TrainingList[0].StartingTime);
        SortData(null);

        StateHasChanged();
    }


    void SortData(MatSortChangedEvent sort)
    {
        sortedData = TrainingList.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<TrainingSessionDTO> comparison = null;
            switch (sort.SortId)
            {
                case "date":
                    comparison = (s1, s2) => s1.StartingTime.CompareTo(s2.StartingTime);
                    break;
                case "distanceMeters":
                    comparison = (s1, s2) => s1.DistanceMeters.CompareTo(s2.DistanceMeters);
                    break;
                case "calories":
                    comparison = (s1, s2) => s1.Calories.CompareTo(s2.Calories);
                    break;
                case "velocity":
                    comparison = (s1, s2) => s1.AverageVelocitykmh.CompareTo(s2.AverageVelocitykmh);
                    break;
                case "duration":
                    comparison = (s1, s2) => s1.DurationSeconds.CompareTo(s2.DurationSeconds);
                    break;
                case "sport":
                    comparison = (s1, s2) => s1.SportId.CompareTo(s2.SportId);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(sortedData, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(sortedData, comparison);
                }
            }
        }
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
            ;
        }
        else
        {
            trainingId = ((TrainingSessionDTO)row).Id;
            DateTime trainingTime = ((TrainingSessionDTO)row).StartingTime;
            basic.Update(trainingId, trainingTime);
            _errorMessage = "";
            _statusClass = "";
            this.StateHasChanged();
        }
    }

    void DeleteRow()
    {
        int id = TrainingList.FindIndex(x => x.Id == trainingId);
        if (id == -1) // error
        {
            _errorMessage = "Choose activity to be deleted";
            _statusClass = "alert-danger";
            return;
        }


        LocalActivityServices.DeleteTrainingSession(trainingId);
        TrainingList = TrainingList.Where((source, index) => index != id).ToArray();

        SortData(null);
        if (id == 0)
            basic.Update(TrainingList[0].Id, TrainingList[0].StartingTime);

        StateHasChanged();
    }

    TrainingSessionDTO[] sortedData = null;

}
