@page "/"

@using SportApp.Client.Services;
@using SportApp.Shared.Services;
@using SportApp.Shared.ViewModel;
@using SportApp.Shared.Authenticate
@using SportApp.Client.LoginLogic
@using Newtonsoft.Json 
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@inject SportApp.Client.LoginLogic.LoginState LoginState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILoginServices LocalLoginServices

@inject NavigationManager NavigationManager
@inject HttpClient http

<div class="float-right"><MatButton Outlined="true" @onclick="NavigateToSignup">Sign up</MatButton></div>
<br />
<p>
    <MatTextField @bind-Value="@_userName" @oninput="(x=> _userName = (string)x.Value)" Label="User name" Outlined="true" Icon="supervised_user_circle" @onkeypress="@(e => KeyWasPressed(e))"></MatTextField>
</p>
<p>
    <MatTextField @bind-Value="@_password" @oninput="(x=> _password = (string)x.Value)" Dense="true" Label="Password" Outlined="true" type="password" Icon="vpn_key" @onkeypress="@(e => KeyWasPressed(e))"></MatTextField>
</p>
<p>
    <MatButton Outlined="true" Icon="done_outline" @onclick="Log">Sign in</MatButton>
</p>
<br />
<p>
    <div class="alert @_statusClass">@_errorLogin</div>
</p>
@code
     {

    private string _statusClass;
    private string _password = "";
    private string _errorLogin;
    private string _userName = "";

    public string UserName
    {
        get => _userName;
        set
        {
            _userName = value;
            this.StateHasChanged();
        }
    }

    public string Password
    {
        get => _password;
        set
        {
            _password = value;
            this.StateHasChanged();
        }
    }

    private void KeyWasPressed(KeyboardEventArgs args)
    {

        if (args.Key == "Enter")
        {
            this.StateHasChanged();
            Log();
        }
    }

    private async Task Log()
    {   
        var log_data = new AuthenticateRequest();
        log_data.Username = UserName.Trim();
        log_data.Password = PasswordEnctrypt.EncodePassword(Password, "");
        HttpResponseMessage response = new HttpResponseMessage();
        try
        {            
            response = await http.PostAsJsonAsync<AuthenticateRequest>("/Login/auth", log_data);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            AuthenticateResponse jsonResponse = JsonConvert.DeserializeObject<AuthenticateResponse>(jsonString);
            await localStorage.SetItemAsync("Id", jsonResponse.Id);
            await localStorage.SetItemAsync("UserName", jsonResponse.Username);
            await localStorage.SetItemAsync("Token", jsonResponse.Token);
            LoginState.LoggedIn = true;
            NavigationManager.NavigateTo("/diary");
        }
        else
        {
            _errorLogin = "Błędne dane logowania";
            _statusClass = "alert-danger";
            StateHasChanged();
        }
    }

    void NavigateToSignup()
    {
        NavigationManager.NavigateTo("/signup");
    }

    protected override async Task OnInitializedAsync()
    {
        List<UserDTO> u = await LocalLoginServices.GetUser(5);
    }
}